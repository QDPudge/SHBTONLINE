<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" encoding="UTF-8" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
    
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// <copyright file="<#=        efHost.EntityType.Name #>.cs">
//        Copyright(c)2015   rights reserved.
//        CLR版本：4.0.30319.239
//        开发组织：李文学@上海同岩土木科技工程有限公司
//        所属工程：TY.*
//        生成时间：<#=        DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Data.Domain;
using Data.DomainMap;

<#
    var summary="";
    var entity=efHost.EntityType;
    if(entity.Documentation !=null && entity.Documentation.Summary!=null)
        summary=entity.Documentation.Summary;

    else if(entity.Documentation !=null && entity.Documentation.LongDescription!=null)
        summary=entity.Documentation.LongDescription;
    else
        summary=string.Format("[{0}]", entity.Name);

#>

//namespace <#=        code.EscapeNamespace(efHost.Namespace) #>
namespace  Data.Domain
{
    /// <summary>
    /// <#=        summary#>
    /// </summary>
    [Serializable]
    public partial class <#=        efHost.EntityType.Name #> 
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
        && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        /// <summary>
        /// 构造函数
        /// </summary>
        public <#=            code.Escape(efHost.EntityType) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
#>
            this.<#=                code.Escape(navProperty) #> = new List<<#=                code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
        }
#>
        }

<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
        if(property.Documentation !=null && property.Documentation.Summary!=null)
            summary=property.Documentation.Summary;

        else  if(property.Documentation !=null && property.Documentation.LongDescription!=null)
            summary=property.Documentation.LongDescription;
        else   
            summary=string.Format("[{0}]", property.Name);

#>
        /// <summary>
        /// <#=            summary#>
        /// </summary>
        <#=            Accessibility.ForProperty(property) #> <#=            typeUsage #> <#=            code.Escape(property) #> { get; set; }
<#
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        /// <summary>
        /// 导航集合：<#=                navProperty#>
        /// </summary>
        public virtual ICollection<<#=                code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#=                code.Escape(navProperty) #> { get; set; }
<#
        }
        else
        {
#>
        /// <summary>
        /// 导航属性：<#=                navProperty#>
        /// </summary>
        public virtual <#=                code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#=                code.Escape(navProperty) #> { get; set; }
<#
        }
    }
#>
    }
}
