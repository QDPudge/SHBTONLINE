	
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// <copyright file="YwDiseaseModifyHistoryMap.cs">
//        Copyright(c)2015   rights reserved.
//        CLR版本：4.0.30319.239
//        开发组织：李文学@上海同岩土木科技工程有限公司
//        所属工程：TY.*
//        生成时间：2016-12-15 09:54
// </copyright>
//------------------------------------------------------------------------------

	using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;

namespace TY.SHMetroPlan.Data.Domain.Models.Mapping
{
    public class YwDiseaseModifyHistoryMap : EntityTypeConfiguration<YwDiseaseModifyHistory>
    {
        public YwDiseaseModifyHistoryMap()
        {
            // Primary Key
            this.HasKey(t => t.Id);

            // Properties
            this.Property(t => t.Id)
                .IsRequired()
                .IsFixedLength()
                .HasMaxLength(36);

            this.Property(t => t.DiseaseHistoryCode)
                .HasMaxLength(200);

            this.Property(t => t.DiseaseId)
                .IsFixedLength()
                .HasMaxLength(36);

            this.Property(t => t.DiseaseCode)
                .HasMaxLength(200);

            this.Property(t => t.DiseaseDetailId)
                .IsFixedLength()
                .HasMaxLength(36);

            this.Property(t => t.DiseaseDetailCode)
                .HasMaxLength(200);

            this.Property(t => t.LineCode)
                .HasMaxLength(200);

            this.Property(t => t.WorkAreaCode)
                .HasMaxLength(200);

            this.Property(t => t.EquipmentCode)
                .HasMaxLength(200);

            this.Property(t => t.EquipmentTypeCode)
                .HasMaxLength(200);

            this.Property(t => t.TurnouAreatCode)
                .HasMaxLength(200);

            this.Property(t => t.TurnouCode)
                .HasMaxLength(200);

            this.Property(t => t.DiseaseTypeCode)
                .HasMaxLength(200);

            this.Property(t => t.DiseaseOtherContent)
                .HasMaxLength(400);

            this.Property(t => t.FacilityCode)
                .HasMaxLength(200);

            this.Property(t => t.CheckTaskCode)
                .HasMaxLength(200);

            this.Property(t => t.MemberConfigCode)
                .HasMaxLength(200);

            this.Property(t => t.CheckArrayCode)
                .HasMaxLength(200);

            this.Property(t => t.CheckLeaderCode)
                .HasMaxLength(200);

            this.Property(t => t.CheckMemberCode)
                .HasMaxLength(400);

            this.Property(t => t.CheckRangeCode)
                .HasMaxLength(200);

            this.Property(t => t.DiseaseRemark)
                .HasMaxLength(200);

            this.Property(t => t.Suggestion)
                .HasMaxLength(200);

            this.Property(t => t.RailCode)
                .HasMaxLength(200);

            this.Property(t => t.StockType)
                .HasMaxLength(200);

            this.Property(t => t.FindEmpId)
                .HasMaxLength(200);

            this.Property(t => t.EmpId)
                .HasMaxLength(36);

            this.Property(t => t.EmpCode)
                .HasMaxLength(200);

            // Table & Column Mappings
            this.ToTable("YwDiseaseModifyHistory");
            this.Property(t => t.Id).HasColumnName("Id");
            this.Property(t => t.DiseaseHistoryCode).HasColumnName("DiseaseHistoryCode");
            this.Property(t => t.DiseaseId).HasColumnName("DiseaseId");
            this.Property(t => t.DiseaseCode).HasColumnName("DiseaseCode");
            this.Property(t => t.DiseaseDetailId).HasColumnName("DiseaseDetailId");
            this.Property(t => t.DiseaseDetailCode).HasColumnName("DiseaseDetailCode");
            this.Property(t => t.CheckDataType).HasColumnName("CheckDataType");
            this.Property(t => t.LineCode).HasColumnName("LineCode");
            this.Property(t => t.WorkAreaCode).HasColumnName("WorkAreaCode");
            this.Property(t => t.EquipmentCode).HasColumnName("EquipmentCode");
            this.Property(t => t.EquipmentTypeCode).HasColumnName("EquipmentTypeCode");
            this.Property(t => t.TurnouAreatCode).HasColumnName("TurnouAreatCode");
            this.Property(t => t.TurnouCode).HasColumnName("TurnouCode");
            this.Property(t => t.DiseaseTypeCode).HasColumnName("DiseaseTypeCode");
            this.Property(t => t.DiseaseOtherContent).HasColumnName("DiseaseOtherContent");
            this.Property(t => t.FacilityCode).HasColumnName("FacilityCode");
            this.Property(t => t.IsEvaluated).HasColumnName("IsEvaluated");
            this.Property(t => t.IsImported).HasColumnName("IsImported");
            this.Property(t => t.CheckTaskType).HasColumnName("CheckTaskType");
            this.Property(t => t.CheckTaskCode).HasColumnName("CheckTaskCode");
            this.Property(t => t.MemberConfigCode).HasColumnName("MemberConfigCode");
            this.Property(t => t.CheckArrayCode).HasColumnName("CheckArrayCode");
            this.Property(t => t.CheckLeaderCode).HasColumnName("CheckLeaderCode");
            this.Property(t => t.CheckMemberCode).HasColumnName("CheckMemberCode");
            this.Property(t => t.CheckRangeCode).HasColumnName("CheckRangeCode");
            this.Property(t => t.DiseaseClass).HasColumnName("DiseaseClass");
            this.Property(t => t.DiseaseLibCls).HasColumnName("DiseaseLibCls");
            this.Property(t => t.DiseaseState).HasColumnName("DiseaseState");
            this.Property(t => t.DiseaseRemark).HasColumnName("DiseaseRemark");
            this.Property(t => t.Suggestion).HasColumnName("Suggestion");
            this.Property(t => t.RailCode).HasColumnName("RailCode");
            this.Property(t => t.StockMark).HasColumnName("StockMark");
            this.Property(t => t.StockType).HasColumnName("StockType");
            this.Property(t => t.BoardNo).HasColumnName("BoardNo");
            this.Property(t => t.DirectionMark).HasColumnName("DirectionMark");
            this.Property(t => t.StartRailNo).HasColumnName("StartRailNo");
            this.Property(t => t.EndRailNo).HasColumnName("EndRailNo");
            this.Property(t => t.WriteDate).HasColumnName("WriteDate");
            this.Property(t => t.FindEmpId).HasColumnName("FindEmpId");
            this.Property(t => t.FindWay).HasColumnName("FindWay");
            this.Property(t => t.FindDate).HasColumnName("FindDate");
            this.Property(t => t.Depth).HasColumnName("Depth");
            this.Property(t => t.Width).HasColumnName("Width");
            this.Property(t => t.Length).HasColumnName("Length");
            this.Property(t => t.Area).HasColumnName("Area");
            this.Property(t => t.DiseaseNum).HasColumnName("DiseaseNum");
            this.Property(t => t.ChecktDate).HasColumnName("ChecktDate");
            this.Property(t => t.CheckStartMileage).HasColumnName("CheckStartMileage");
            this.Property(t => t.CheckEndMileage).HasColumnName("CheckEndMileage");
            this.Property(t => t.EmpId).HasColumnName("EmpId");
            this.Property(t => t.EmpCode).HasColumnName("EmpCode");
            this.Property(t => t.CreateTime).HasColumnName("CreateTime");
            this.Property(t => t.UpdateTime).HasColumnName("UpdateTime");
            this.Property(t => t.RowVersion).HasColumnName("RowVersion");

            // Relationships
            this.HasOptional(t => t.YwDiseaseData)
                .WithMany(t => t.YwDiseaseModifyHistories)
                .HasForeignKey(d => d.DiseaseDetailId);

        }
    }
}
